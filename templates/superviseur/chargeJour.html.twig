{# {% extends 'base.html.twig' %} 

{% block title %}Planning {{ service }} :{% endblock %}#}
{% block head %}<META HTTP-EQUIV="Refresh" CONTENT="300">{% endblock %}
{% block stylesheets %}
    <link rel="stylesheet" href="https://bootswatch.com/4/lumen/bootstrap.min.css">
    <link rel="stylesheet" href="{{ asset('build/bootstrap-toggle.min.css') }}">
    <link rel="stylesheet" href="{{ asset('build/App.css') }}">
    <style type="text/css">
        .card.draggable {
        margin-bottom: 1rem;
        cursor: grab;
        }
        .droppable {
            background-color: var(--success);
            min-height: 120px;
            margin-bottom: 1rem;
        }
        .progress {
            position: inherit;
            background: #ff4136;
        }
        #icone{
            height: 1.5em;
            width: 1.5em;
        }
        .scroll {
            max-height: 100vh;
            overflow-y: auto;
        }
    </style>
{% endblock %}    
{% block body %}

{% set num = 1 %}
<div class="container-fluid pt-3">
    <!-- Kpi Header -->
    <div class="row m-b-1">
        {# {{ render(controller('App\\Controller\\IndicateursController::indic_Header',{ 'service' : service})) }} #}
        {% include 'indicateurs/Frames/IndicHeader.html.twig' %}
    </div>
    <h1>Echéancier {{ service }} :</h3>
    <div class="small  text-light">Déplacer les étiquettes dans les zones appropriées</div>
    <div class="row flex-row flex-sm-nowrap py-3">
        {% for key, tache in taches %}
            <div class="col-sm-6 col-md-4 col-xl-3">
                <div class="card bg-light scroll">
                    <div class="card-body">
                        <h6 class="card-title text-uppercase text-truncate py-2">{{key}}</h6>
                        <div class="items border border-light">
                            {% for item in tache %}
                                {% set nomCard = ['cd',num]|join %}<!-- Conception des noms des cards contenant les données -->
                                {% set titre = [item.action,'-',item.identification]|join %}<!-- Conception des titres -->
                                {% set icone = ['build/images/',item.Statut,'.png']|join %}<!-- Conception du chemin de l'image correspondant au statut -->
                                <!-- Recherche infos svt les OF liés à la demande-->
                                {% set limitePoly = " Pas d'OF liés " %}
                                {% set nbOFOK = 0 %}
                                {% if item.NumDemande.ListOF is iterable %}
                                    {% for OF in item.NumDemande.ListOF %}
                                        <!-- Détermination de la date limite de polymérisation-->
                                        {% set limitePoly = OF.WorkLife %}
                                        <!-- Détermination du pourcentage d'avancement des OF au moulage(statut Moul ou Charg)-->
                                        {% if OF.Statut == "CHARG" %}
                                            {% set nbOFOK = nbOFOK + 1 %}
                                        {% endif %}  
                                    {% endfor %}
                                    {% if nbOFOK != 0 %}
                                        {% set pourc = (nbOFOK / item.NumDemande.ListOF|length)*100 %} 
                                    {% else %}
                                        {% set pourc = 5 %} 
                                    {% endif %}  
                                                                
                                {% endif %}
                                <div class="card draggable border-primary shadow-sm" id='{{nomCard}}' draggable="true" ondragstart="drag(event)">
                                    <div class="card-body p-2">
                                        <div class="card-header bg-warning">
                                            <img src="{{asset(icone)}}" id ="icone" class="rounded-circle float-right" tooltip="{{item.Statut}}">
                                            <a href="#" class="lead font-weight-bolder">{{titre}}</a>
                                        </div>
                                        <div class="card-body">
                                            <p>
                                                <br>Début : {{ item.DebutDate|date('d/m/y H:i') }} / Limite Polym : {{limitePoly}}</br>
                                                <br>Commentaires : {{item.NumDemande.Commentaires}}</br>
                                            </p>
                                            <div class="progress m-1">
                                                <div class="progress-bar" role="progressbar" style="{{ ['width: ',pourc,'%']|join }}" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">{{ [pourc,'%']|join }}</div>
                                            </div>
                                        </div>
                                        <div class="card-footer">
                                            <button class="btn btn-primary btn-sm">View</button>
                                        </div>
                                    </div>
                                </div>
                                {% set num = num + 1 %}
                            {% endfor %}
                            <div class="dropzone rounded" ondrop="drop(event)" ondragover="allowDrop(event)" ondragleave="clearDrop(event)"> &nbsp; </div>
                        </div>
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>
</div>
{% endblock %}
{% block javascripts %}
<script src="{{ asset('build/jquery.min.js') }}"></script>
<script type="text/javascript">
    const drag = (event) => {
    event.dataTransfer.setData("text/plain", event.target.id);
    }

    const allowDrop = (ev) => {
    ev.preventDefault();
    if (hasClass(ev.target,"dropzone")) {
        addClass(ev.target,"droppable");
    }
    }

    const clearDrop = (ev) => {
        removeClass(ev.target,"droppable");
    }

    const drop = (event) => {
    event.preventDefault();
    const data = event.dataTransfer.getData("text/plain");
    const element = document.querySelector(`#${data}`);
    try {
        // remove the spacer content from dropzone
        event.target.removeChild(event.target.firstChild);
        // add the draggable content
        event.target.appendChild(element);
        // remove the dropzone parent
        unwrap(event.target);
    } catch (error) {
        console.warn("can't move the item to the same place")
    }
    updateDropzones();
    }

    const updateDropzones = () => {
        /* after dropping, refresh the drop target areas
        so there is a dropzone after each item
        using jQuery here for simplicity */
        
        var dz = $('<div class="dropzone rounded" ondrop="drop(event)" ondragover="allowDrop(event)" ondragleave="clearDrop(event)"> &nbsp; </div>');
        
        // delete old dropzones
        $('.dropzone').remove();

        // insert new dropdzone after each item   
        dz.insertAfter('.card.draggable');
        
        // insert new dropzone in any empty swimlanes
        $(".items:not(:has(.card.draggable))").append(dz);
    };

    // helpers
    function hasClass(target, className) {
        return new RegExp('(\\s|^)' + className + '(\\s|$)').test(target.className);
    }

    function addClass(ele,cls) {
    if (!hasClass(ele,cls)) ele.className += " "+cls;
    }

    function removeClass(ele,cls) {
    if (hasClass(ele,cls)) {
        var reg = new RegExp('(\\s|^)'+cls+'(\\s|$)');
        ele.className=ele.className.replace(reg,' ');
    }
    }

    function unwrap(node) {
        node.replaceWith(...node.childNodes);
    }
</script>
{% endblock %}
