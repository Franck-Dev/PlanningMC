{% extends 'base.html.twig' %}

{% block title %}Listes des cycles de polymérisations{% endblock %}
{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('build/vis.css') }}">
    <style type="text/css">

        .card-header {
            color: black;
            font:   blue;
        }
        .table-responsive{
            font-size:  1vw;
        }
        #btn-success{
            font-size:  1vw;
        }
        @media screen and (max-width: 800px) {
        table,
        tbody,
        tr,
        td {
            display: block;
            width: auto!important;
            font-size:  1.2em;
            }
        }
        input {
            border: 2px solid blue;
            border-radius: 4px;
          }
        select {
            border: 2px solid blue;
            border-radius: 4px;
        }
        .btn.btn-info.btn-block {
            -webkit-text-fill-color: aliceblue;

        }
        #volet {
            height: 550px;
            width: 550px;
            padding: 10px;
            background: blue; color: blue;
            position: relative;
	        left: -550px; top: 130px;
            -webkit-transition: all .5s ease-in;
	        transition: all .5s ease-in;
            position:  fixed;	
        }
        #volet_droit {
            height: 550px;
            width: 550px;
            padding: 10px;
            background: blue; color: blue;
            position: relative;
	        right: -550px; top: 130px;
            -webkit-transition: all .5s ease-in;
	        transition: all .5s ease-in;
            position:  fixed;	
        }
        #volet a.ouvrir,
        #volet a.fermer {
            padding: 10px 25px;
            background: #555;
            color: #fff;
            text-decoration: none;
            position: absolute;
            right: -93px;
            top: 29px;
            /* quelques styles CSS3 */
            -ms-transform: rotate(270deg);
            -moz-transform: rotate(270deg);
            -webkit-transform: rotate(270deg);
            transform: rotate(270deg);
            border-radius: 0 0 8px 8px;
        }
        #volet_droit a.ouvrir,
        #volet_droit a.fermer {
            padding: 10px 25px;
            background: #555;
            color: #fff;
            text-decoration: none;
            position: absolute;
            left: -93px;
            top: 29px;
            /* quelques styles CSS3 */
            -ms-transform: rotate(90deg);
            -moz-transform: rotate(90deg);
            -webkit-transform: rotate(90deg);
            transform: rotate(90deg);
            border-radius: 0 0 8px 8px;
        }
        #volet:target {
	        left: 0;
        }
         #volet_droit:target {
	        right: 0;
        }
        #volet a.fermer {
	        display: none;
        }
        #volet_droit a.fermer {
	        display: none;
        }
        #volet_clos:target #volet {
	        left: -550px;
        }
        #volet_clos_droit:target #volet_droit {
	        right: -550px;
        }
        #volet:target a.ouvrir {
            display: none;
        }
        #volet_droit:target a.ouvrir {
            display: none;
        }
        #volet:target a.fermer {
            display: block;
        }
        #volet_droit:target a.fermer {
            display: block;
        }
        
	</style>
{% endblock %}
{% block body %}
<div class="row">
	<div class="col-md-10">
        <h1>Listing des Demandes de créneaux de polymérisation en date du :</h1>
    </div>
    <div class="col-md-2">
        <div class="input-group">
            <form action="{{ path('Planification')}}" method="POST">
                <input type="date" id="datejourplanif" name="DatedebPlan" value={{datedeb|date('Y-m-d')}}>
                <button type="submit" class="btn btn-success" value="Submit"style="border-radius:40px;background-color:blue;color:white">Valider</button>
            </form>
        </div>
    </div>
</div>
<!-- Création du slider Indicateur Répartition Charge -->
<div id="volet_clos">
	<div id="volet">
		<div class="col-xl-12">
            <div class="card shadow">
                <h4 class="card-header">Répartition de la charge par Moyens (Totale : {{CharTot|raw}} H)<span class="tag tag-success" id="revenue-tag"></span></h4>
                <div class="card-block">
                    <div id="repartition-charge"></div>
                </div>
            </div>
        </div>	
		<a href="#volet" class="ouvrir" aria-hidden="true" onclick=MaJkpiRC("repartition-charge",'{{ path('Maj_Indicateur') }}')>Répartion Charge !</a>
        <a href="#volet_clos" class="fermer" aria-hidden="true">fermer !</a>
	</div>
</div>
<!-- Création du slider Indicateur remplissage -->
<div id="volet-droit_clos">
	<div id="volet_droit">
		<div class="col-xl-12">
            <div class="card shadow">
                <h4 class="card-header">Charge par Moyens sur la semaine<span class="tag tag-success" id="revenue-tag"></span></h4>
                <div class="card-block">
                    <div id="occupation-moyen"></div>
                </div>
            </div>
        </div>
		<a href="#volet_droit" class="ouvrir" aria-hidden="true" onclick=MaJkpi("occupation-moyen",'{{ path('Maj_Indicateur') }}')>Taux Occupation !</a>
        <a href="#volet_clos_droit" class="fermer" aria-hidden="true">fermer !</a>
	</div>
</div>
 {#<pre>{{dump(items)}}</pre>#}  
 {#<pre> {{ dump(app.request.attributes.get("demande")) }} </pre>#}    
    <div class="table-responsive">
        <table class="table">
            <thead>		
            </thead>
                <table class="table">	
                {% set start_jour = datedeb | date('d') %}<!-- Recherche du n° du jour de départ de la semaine n+1-->
                {% set end_jour = datefin | date('d') %}<!-- Recherche du n° du jour de fin de la semaine n+1 -->
                {% for day in  start_jour .. start_jour+6  %}<!-- Boucle sur la semaine concernée -->
                    {% set jour = day-start_jour %}<!-- Variable permettant de recaler l'offset dût à la boucle -->
                    {% set myDate = datedeb|date_modify(['+',jour,'days']|join) %}<!-- On prend en compte l'offset pour retrouver le premier jour de la semaine -->
                    {% set myDa = myDate|localizeddate('none', 'none', null, null, 'EEEE') %}<!-- Nom des jours de la semaine -->
                    {% set myDat = myDate|date('d/m/y')|upper %}<!-- Mise en forme des jours -->
                    <tr>
                        <!-- Mise en forme du bouton de validation de la plannification -->
                        <td colspan="11">

                                <i href="" data-toggle="modal" class="btn btn-info btn-block" font="white" data-target="" data-id={{ myDat }} onclick=ValidJour('{{day}}')>
                                        <span>SOUMETTRE LES DEMANDES DU {{myDa}} {{myDat}}</span>

                        </td>
                    </tr>
                    <thead>
                            <tr> 
                                <!-- Titre du tableau -->
                                    <th> Id </th>
                                    <th> Cycle </th>
                                    <th> Date et Heure Début </th>
                                    <th> Heure Fin Théo </th>
                                    <th> Nbre OT </th>
                                    <th> Récurrance </th>
                                    <th> Valide</th>
                                    <th> Moyen Utilisé</th>
                                    <th> Action </th>
                                    <th></th>
                    
                            </tr>
                    </thead>
                    {% for test in tests if test.datePropose|date('d/m/Y') == myDate|date('d/m/Y') %}<!-- Boucle sur toutes les demandes effectuées -->	
                    {% set durecycle = test.cycle.duree | date('H:i') %}<!-- Mise au format des durée de polymérisation -->
                    {% set dureecycle = [durecycle|date('H'),'hours',' ',durecycle|date('i'),'minutes']|join %}	
                    {% set nominputHF = ['HeureFin',test.Id]|join %}<!-- Conception des noms des inputs contenant la date de fin après calculfin -->
                    {% set nominputHD = ['HeureDebut',test.Id]|join %}<!-- Conception des noms des inputs contenant la date de debut après calculfin -->
                    {% set nominputS = ['Statut',test.Id]|join %}<!-- Conception des noms des inputs contenant le statut de plannification -->
                    {% set nominputR = ['Recur',test.Id]|join %}<!-- Conception des noms des inputs contenant la réccurance de plannification -->
                    {% set nomselectM = ['Choixmoyen',test.Id]|join %}<!-- Conception des noms des inputs contenant la sélection du moyen utilisé -->
                    {% set HFId = ['Hfin',test.Id]|join %}<!-- Conception des noms des inputs cachés contenant la date de fin après calculfin -->
                    {% set HDId = ['Hdeb',test.Id]|join %}<!-- Conception des noms des inputs cachés contenant la date de debut après calculfin -->
                    {% set StatutId = ['Statut',test.Id]|join %}<!-- Conception des noms des inputs cachés contenant le statut de plannification -->
                    {% set MoyenId = ['Moyen',test.Id]|join %}<!-- Conception des noms des inputs cachés contenant la sélection du moyen utilisé -->
                    {% set dateurdeb = [test.datepropose|date('Y/m/d'),' ',test.heurepropose|date('H:i')]|join %}<!-- Mise en forme de la date et heure de départ de polymérisation -->	
                    {% set UrlId = ['UrlId',test.Id]|join %}<!-- Conception des noms des inputs cachés contenant l'url de la demande à traiter' -->
                    {% set CycleId = ['CycleId',test.Id]|join %}<!-- Conception des noms des inputs cachés contenant le cycle de la demande à traiter' -->

                    <tbody>
                        <tr id="{{ test.Id }}" {% if (test.plannifie == 1) %}
                                style="background-color:green"
                            {% else %}
                            style="background-color:red"
                            {% endif %} 
                        >
                            <td>{{ test.Id }}</td>
                            <td>{{ test.cycle.nom }}</td>
                            <td><input id='{{nominputHD}}' type="datetime-local" name="appt-time" value={{ dateurdeb|date('Y-m-d\\TH:i') }} onblur=calculfin('{{durecycle|date('H:i')}}',this.value,{{test.Id}}) pattern="[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}" required></td><!-- Calcul de la nouvelle date de fin suite modification de la date de départ -->
                            <td><input id='{{nominputHF}}' type="datetime-local" name="appt-time" value={{ dateurdeb|date_modify( dureecycle )|date('Y-m-d\\TH:i') }} pattern="[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}" required> </td><!-- Intégration de la date et heure de fin suivant la durée du cycle -->
                            <td>{{ test.outillages }}</td>
                            <td>{{ test.reccurance ? 'OUI' : 'NON'}}</td>
                            <td><input id='{{nominputS}}' type="hidden" value={{ test.plannifie ? 'OUI' : 'NON'}} readonly>
                                {% if (test.recurvalide == true)  %}
                                    <input type="checkbox" id='{{nominputR}}' value='{{ test.Id }}' checked disabled="true" >
                                {% else %}
                                    {% if (test.reccurance == false) %}
                                        <input type="checkbox" id='{{nominputR}}' value='{{ test.Id }}' disabled="true" >
                                    {% else %}
                                        <input type="checkbox" id='{{nominputR}}' value='{{ test.Id }}'>
                                    {% endif %}         
                                {% endif %}
                            </td>
                            <td> {% if (test.plannifie == 0) %}
                                    <select id='{{nomselectM}}'>
                                        {% for numero in items %}
                                            <option value={ numero.libelle }>{{ numero.libelle }}</option>
                                        {% endfor %}   
                                    </select><br>
                                    {{ test.moyenutilise }}
                                {% else %}
                                    <input id='{{nomselectM}}' type="text" value={{ test.moyenutilise.libelle }} readonly>
                                {% endif %}
                            </td>
                            <td>
                                <j>
                                {% if (test.plannifie == 0) %}
                                    <b ref=""  id="btn-success" class="btn btn-success" style="border-radius:40px;background-color:blue;color:white" onclick=validation('{{test.Id}}','{{test.plannifie}}','{{ path('Polym_Crea', {'id': test.id}) }}')>Enregistrer</b>
                                {% else %}
                                    <b ref=""  id="btn-success" class="btn btn-success" style="border-radius:40px;background-color:red;color:white" onclick=modification('{{test.Id}}','{{test.plannifie}}','{{ path('Polym_Crea', {'id': test.id}) }}')>Modifier</b>   
                                {% endif %}
                                <input type="hidden" name='{{UrlId}}' value="{{ path('Polym_Crea', {'id': test.id}) }}"/>
                                <input type="hidden" name='{{CycleId}}' value="{{test.cycle.nom}}"/>
                                <input type="hidden" name='{{HDId}}' />
                                <input type="hidden" name='{{HFId}}' />
                                <input type="hidden" name='{{StatutId}}' />
                                <input type="hidden" name='{{MoyenId}}' />
                                </j>
                            </td>
                            <td><input type="checkbox" id='{{nominputS}}' value='{{ test.Id }}' ></td>
                        </tr>
                    {% endfor %}
                    </i>
                {% endfor %}
                </tbody>
            </table>
                <h1>Prévisualisation des créneaux de polymérisations ✅</h1>
 		<div id="visualization">

		</div>	
    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalTitle" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    {{ render(controller('App\\Controller\\PlanningMCController::DemandesCrea',{'user': app.user}))}}
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
{% block javascripts %}
<script src="{{ asset('build/canvasjs.min.js') }}"></script>
<script src="{{ asset('build/tether.min.js') }}"></script>
<script src="{{ asset('build/vis.js') }}"></script>
<script src="{{ asset('build/handlebars.min.js') }}"></script>
<script src="{{ asset('build/prototype.js') }}"></script>
<script src="{{ asset('build/sweetalert.min.js') }}"></script>
<script src="{{ asset('build/jquery.min.js') }}"></script>
<script id="item-template" type="text/x-handlebars-template">
            <table class="infos">
                <tr>
                    <td colspan="3" class="programmes">{% verbatim %}{{programmes}}{% endverbatim %}</td>
                    <th><img src="{{asset('build/images/{{statut}}.png')}}" width="31" height="20" alt="{% verbatim %}{{icone}}{% endverbatim %}"></th>
                    <td colspan="3" class="statut">{% verbatim %}{{statut}}{% endverbatim %}</td>
                </tr>
            </table>
    </script>
    <script id="item-popup" type="text/x-handlebars-template">
            <table class="infos">
                <tr>
                    <td colspan="3" class="programmes">{% verbatim %}{{programmes}}{% endverbatim %}</td>
                    <td colspan="3" class="statut">{% verbatim %}{{statut}}{% endverbatim %}</td>
                </tr>
            </table>
    </script>
<script type="text/javascript">
//Mise à jour de l'indicateur d'occupation moyen à chaque click
function MaJkpi(id,Url){
    console.log(document.getElementById(id));
    $(document).ready(function () {
        $.ajax({
                method: "POST",
                data: {NomKPI: id},
                url: Url,
                success: function(dat){
                    console.log(dat.TabVal);
                    $(function(){
     // CanvasJS bar chart to show country wise annual users percentage
				var OccupationMoyen = new CanvasJS.Chart("occupation-moyen", {
                    animationEnabled: true,
                    exportEnabled: true,
					theme: "theme2",
					axisX: {
						labelFontColor: "#848484",
						labelFontSize: 18,
						lineThickness: 0,
						tickThickness: 0
					},
					axisY: {
						gridThickness: 0,
						lineThickness: 0,
						tickThickness: 0,
						valueFormatString: " "
						                    
					},
					toolTip: {
						backgroundColor: "#ffffff",
						borderThickness: 0,
						cornerRadius: 0,
						fontColor: "#424242",
						contentFormatter: function (e) {
							return e.entries[0].dataPoint.label + ": " +  CanvasJS.formatNumber(Math.round(e.entries[0].dataPoint.y / 100 ), '###,###'); // calculating and showing country wise number of users inside tooltip
						}
					},
					data: [
						{
							color: "#424242",
							indexLabelFontColor: "#848484",
							indexLabelFontFamily: "calibri",
							indexLabelFontSize: 18,
							indexLabelPlacement: "outside",
							type: "bar",
							dataPoints: dat.TabVal
						}
					]
				});
                OccupationMoyen.render();
                });
                }
            });
    });
}
        
//Mise à jour de l'indicateur de répartition de la charge par moyen à chaque click
function MaJkpiRC(id,Url){
    console.log(document.getElementById(id));
    $(document).ready(function () {
        $.ajax({
                method: "POST",
                data: {NomKPI: id},
                url: Url,
                success: function(dat){
                    console.log(dat.TabVal);
                    $(function(){
     // CanvasJS bar chart to show country wise annual users percentage
				var RepartitionCharge = new CanvasJS.Chart("repartition-charge", {
                    animationEnabled: true,
                    exportEnabled: true,
					theme: "theme2",
					axisX: {
						labelFontColor: "#848484",
						labelFontSize: 18,
						lineThickness: 0,
						tickThickness: 0
					},
					axisY: {
						gridThickness: 0,
						lineThickness: 0,
						tickThickness: 0,
						valueFormatString: " "
						                    
					},
					toolTip: {
						backgroundColor: "#ffffff",
						borderThickness: 0,
						cornerRadius: 0,
						fontColor: "#424242",
						contentFormatter: function (e) {
							return e.entries[0].dataPoint.label + ": " +  CanvasJS.formatNumber(Math.round(e.entries[0].dataPoint.y / 100 ), '###,###'); // calculating and showing country wise number of users inside tooltip
						}
					},
					data: [
						{
							color: "#424242",
							indexLabelFontColor: "#848484",
							indexLabelFontFamily: "calibri",
							indexLabelFontSize: 18,
							indexLabelPlacement: "outside",
							type: "bar",
							dataPoints: dat.TabVal
						}
					]
				});
                RepartitionCharge.render();
                });
                }
            });
    });
}

const lang = navigator.language; // "de_DE"; // "en_US"; // 
const locale = (lang && lang !== undefined) ? lang.match(/^\w{2}/)[0] : 
    (lang === "de" || lang === "fr" || lang === "it" || lang === "nl") ? lang : "en"; // "en"; // "de"; //
        // create a handlebars template
        var source = document.getElementById('item-template').innerHTML;
        var template = Handlebars.compile(source);
        console.log(template)
var conteneur = document.getElementById ('visualization');

var groups = {{moyens|raw}};

var items = new vis.DataSet ({{taches|raw}});

var options = {
            template:template,
            stack: true,
            start: '{{datedeb|date('Y-m-d\\TH:i:sP') }}',
            end: '{{datefin|date('Y-m-d\\TH:i:sP') }}',
            orientation: 'top',
            editable : { 
                add : true , // ajoute de nouveaux éléments en double tapant  
                updateTime : true , // déplace les éléments horizontalement  
                updateGroup : true , // déplace les éléments d'un groupe à un autre  
                remove : true , // supprime un élément en appuyant sur le bouton de suppression en haut à droite  
                overrideItems : false  // autorise ces options à remplacer item.editable
            },
            onUpdate: function (item, callback) { 
                //prettyPromptItemUpdate('Données de polymérisation', 'Edition', item, groups, timeline, callback); 
                item.content = prompt('Edit items text:', item.content);
            }
        };
var timeline = new vis.Timeline (conteneur, items, groups, options);
//console.log(options.end);

function calculfin (dureCycle,heureDeb,i)
{
    var i=i;
    //Conversion de la durée du cycle en heures minutes pour ajout à la date de départ
    var dureCycle="1970-01-01T"+dureCycle;
    var durCycle = new Date(dureCycle);
//Idem conversion durée pour date et heure de départ
    console.log(heureDeb);
    var heureDeb = new Date(heureDeb);
//Ajout du temps de cycle à la date de départ pour calcul date de fin
    var newFin=heureDeb.getTime()+durCycle.getTime()+7200000;
    newFin= new Date(newFin);
//Reconstitution du format de la date
    var dateFin = newFin.toISOString().slice(0,10);
    //dateFin=dateFin.replace( /\-/g,"/");
    var heurefin= newFin.toISOString().slice(11,16);
    var newdatefin=dateFin+"T"+heurefin;
    alert('La nouvelle fin sera à  ' + newdatefin);
//Renvoie de la date de fin dans l'input du heureFin
console.log("HeureFin"+i);
    var HF = document.getElementById("HeureFin"+i);
    HF.value=newdatefin; 
};

//Validation de la ligne après submit (statut à oui et couleur verte)
function validation(x,StatPlan,Url){
    
    //console.log(document.getElementsByTagName("j"));
    console.log(document.getElementsByTagName("tr"));
//Validation de la demande avec passage du statut plannifié à "OUI"
var statut = document.getElementById("Statut"+x);
statut.value="OUI";
//Si modification statut à 1 et blocage du choix de moyen
document.querySelector('[name=Statut'+x+']').value = "1";
document.querySelector('[name=Moyen'+x+']').value = document.getElementById("Choixmoyen"+x).options[document.getElementById('Choixmoyen'+x).selectedIndex].text;
//Si la case "valide" est cochée, je créé la réccurance avec l'ID
if(document.getElementById("Recur"+x).checked==true){
    var recurrance=true;
}
else{
    var recurrance=false;
}
    //Reformatage de la date sans le T
    var DateHDeb=document.getElementById("HeureDebut"+x).value;
    var DateDeb=DateHDeb.slice(0,10);
    var HeureDeb=DateHDeb.slice(11,16);
    var newdDateHDeb=DateDeb+" "+HeureDeb;
    var DateHFin=document.getElementById("HeureFin"+x).value;
    var DateFin=DateHFin.slice(0,10);
    var HeureFin=DateHFin.slice(11,16);
    var newdDateHFin=DateFin+" "+HeureFin;
    document.querySelector('[name=Hfin'+x+']').value = newdDateHFin;
    document.querySelector('[name=Hdeb'+x+']').value = newdDateHDeb;
    //var url=document.querySelector('[name=UrlId'+x+']').value;
    var url= Url;
    var cycle=document.querySelector('[name=CycleId'+x+']').value;

    //Envoie de la requette AJAX pour modification du statut et du moyen
    $(document).ready(function () {
        $.ajax({
                method: "POST",
                data: {Hfin: newdDateHFin, Hdeb: newdDateHDeb, Moyen: document.getElementById("Choixmoyen"+x).options[document.getElementById('Choixmoyen'+x).selectedIndex].text, Cycle: cycle, Statut: document.querySelector('[name=Statut'+x+']').value, Reccurance: recurrance},
                url: url,
                success: function(dat){
                            console.log(dat.Message);
                            if(dat.Code===200){
                                document.querySelectorAll("tr").forEach(function(item){
                                if(item.id===x){
                                    //Attribution de la couleur vert pour validation de la ligne(demande)
                                    item.style.backgroundColor="green";
                                    //Modification de la liste déroulante des moyens en input de la ligne(demande)
                                    var Idx=item.children;
                                    Idx[7].innerHTML="<input  id=\"Choixmoyen"+x+"\" type=\"text\" value="+document.getElementById("Choixmoyen"+x).options[document.getElementById('Choixmoyen'+x).selectedIndex].text+">";
                                    //Modification du bouton "Enregistrer" en "Modifier"
                                    Idx[8].innerHTML="<b ref=\"\" id=\"btn-success\" class=\"btn btn-success\" style=\"border-radius:40px;background-color:red;color:white\" onclick=\"modification('"+x+"','1','"+url+"')\">Modifier</b>\n<input type=\"hidden\" name=\"UrlId"+x+"\" value=\""+url+"\">\n<input type=\"hidden\" name=\"Cycle"+x+"\" value=\""+cycle+"\">\n<input type=\"hidden\" name=\"Hde"+x+"\">\n<input type=\"hidden\" name=\"Hfin"+x+"\">\n<input type=\"hidden\" name=\"Statut"+x+"\">\n<input type=\"hidden\" name=\"Moyen"+x+"\">\n";
                                    console.log(dat);
                                    console.log(Idx[6].lastElementChild);
                                    if(dat.StatRecur==true){
                                        Idx[6].lastElementChild.checked=true;
                                        Idx[6].lastElementChild.disabled=true;
                                    }
                                    else{
                                        Idx[6].lastElementChild.checked=false;
                                        Idx[6].lastElementChild.disabled=true;
                                    }
                                }
                            });
                           }
                           else{
                               alert(dat.Message);
                           }
                       }
        });
    });
};

//Modification de la ligne après submit (statut à non et couleur rouge), puis effacement de la table
function modification(x,StatPlan,Url){
    //Validation de la demande avec passage du statut plannifié à "OUI"
    var statut = document.getElementById("Statut"+x);
    statut.value="NON";
    //Modification -> Changement de statut et re-affectation de moyen à faire
    document.querySelector('[name=Statut'+x+']').value = "0";
    document.querySelector('[name=Moyen'+x+']').value = null; 
    //var url=document.querySelector('[name=UrlId'+x+']').value;
    var url=Url;
    //Si la case "valide" est cochée, je créé la réccurance avec l'ID
    if(document.getElementById("Recur"+x).checked==true){
        var recurrance=true;
    }
    else{
        var recurrance=false;
    }
    //Création de la liste des moyen pour le select
    //console.log({{moyens|raw}}[0].id);
    var Moy="<select id=\"Choixmoyen"+x+"\">";

    for (let i = 0; i < {{moyens|raw}}.length; i++) {
        Moy+="\n<option value=\"{\" numero.libelle=\"\" }=\"\">"+{{moyens|raw}}[i].content+"</option>";  
    }
    Moy+="\n</select><br>";
    //console.log(Moy);
    //Envoie de la requette AJAX pour modification du statut et du moyen
    $(document).ready(function () {
        $.ajax({
                method: "POST",
                data: {Moyen: "", Statut: document.querySelector('[name=Statut'+x+']').value,Reccurance: recurrance},
                url: url,
                success: function(dat){
                           //console.log(dat.Code);
                           if(dat.Code===200){
                           document.querySelectorAll("tr").forEach(function(item){
                                if(item.id===x){
                                    //Attribution de la couleur vert pour validation de la ligne(demande)
                                    item.style.backgroundColor="red";
                                    //récupération du cycle
                                    var Idx=item.children;
                                    var cycle=Idx[1].innerHTML;
                                    //console.log(cycle);
                                    //Modification de la liste déroulante en input de la ligne(demande)
                                    Idx[7].innerHTML=Moy;
                                    //Modification du bouton "Enregistrer" en "Modifier"
                                    Idx[8].innerHTML="<b ref=\"\" id=\"btn-success\" class=\"btn btn-success\" style=\"border-radius:40px;background-color:blue;color:white\" onclick=\"validation('"+x+"','0','"+url+"')\">Enregistrer</b>\n<input type=\"hidden\" name=\"UrlId"+x+"\" value=\""+url+"\">\n<input type=\"hidden\" name=\"CycleId"+x+"\" value=\""+cycle+"\">\n<input type=\"hidden\" name=\"Hdeb"+x+"\">\n<input type=\"hidden\" name=\"Hfin"+x+"\">\n<input type=\"hidden\" name=\"Statut"+x+"\">\n<input type=\"hidden\" name=\"Moyen"+x+"\">\n";
                                    Idx[6].lastElementChild.checked=false;
                                    if(dat.StatRecur==true){
                                        Idx[6].lastElementChild.disabled=false;
                                    }
                                    else{
                                        Idx[6].lastElementChild.disabled=true;
                                    }
                                    //console.log(dat);
                                    //console.log(Idx[6].lastElementChild);
                                }
                            });
                           }
                           else{
                               alert(dat.Message);
                           }
                       }
        });
    }); 

}

//Envoie la totalité de la plannification du jour sélectionné
function ValidJour(jour){
    //console.log(document.getElementsByTagName("tr"));
    document.querySelectorAll("tr").forEach(function(item){
        if(item.id){
            var UrlId=document.querySelector('[name=UrlId'+item.id+']').value;
            var Task=item.children[9];
            console.log(Task);
            var Btn=Task.children[0];
            //console.log(UrlId);
            if(Btn.checked===true){

                validation(item.id,"1",UrlId);
                Btn.checked=false;
                console.log(Btn);
            }
        }
    });        
};

//var monAction = document.getElementById("choix moyen");
//monAction.onclick = function(){
            
//        };
$(function(){
     // CanvasJS bar chart occupation par moyen
				var OccupationMoyen = new CanvasJS.Chart("occupation-moyen", {
                    animationEnabled: true,
                    exportEnabled: true,
					theme: "theme2",
					axisX: {
						labelFontColor: "#848484",
						labelFontSize: 18,
						lineThickness: 0,
						tickThickness: 0
					},
					axisY: {
						gridThickness: 0,
						lineThickness: 0,
						tickThickness: 0,
						valueFormatString: " "
						                    
					},
					toolTip: {
						backgroundColor: "#ffffff",
						borderThickness: 0,
						cornerRadius: 0,
						fontColor: "#424242",
						contentFormatter: function (e) {
							return e.entries[0].dataPoint.label + ": " +  CanvasJS.formatNumber(Math.round(e.entries[0].dataPoint.y / 100 ), '###,###'); // calculating and showing country wise number of users inside tooltip
						}
					},
					data: [
						{
							color: "#424242",
							indexLabelFontColor: "#848484",
							indexLabelFontFamily: "calibri",
							indexLabelFontSize: 18,
							indexLabelPlacement: "outside",
							type: "bar",
							dataPoints: {{ChargeMoy|raw}}
						}
					]
				});
            OccupationMoyen.render();
});

$(function(){
     // CanvasJS bar chart occupation par moyen
				var RepartitionCharge = new CanvasJS.Chart("repartition-charge", {
                    animationEnabled: true,
                    exportEnabled: true,
					theme: "theme2",
					axisX: {
						labelFontColor: "#848484",
						labelFontSize: 18,
						lineThickness: 0,
						tickThickness: 0
					},
					axisY: {
						gridThickness: 0,
						lineThickness: 0,
						tickThickness: 0,
						valueFormatString: " "
						                    
					},
					toolTip: {
						backgroundColor: "#ffffff",
						borderThickness: 0,
						cornerRadius: 0,
						fontColor: "#424242",
						contentFormatter: function (e) {
							return e.entries[0].dataPoint.label + ": " +  CanvasJS.formatNumber(Math.round(e.entries[0].dataPoint.y / 100 ), '###,###'); // calculating and showing country wise number of users inside tooltip
						}
					},
					data: [
						{
							color: "#424242",
							indexLabelFontColor: "#848484",
							indexLabelFontFamily: "calibri",
							indexLabelFontSize: 18,
							indexLabelPlacement: "outside",
							type: "bar",
							dataPoints: {{RepartChargeMoy|raw}}
						}
					]
				});
            RepartitionCharge.render();
});

</script>
{% endblock %}

